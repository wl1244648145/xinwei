#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <pthread.h> 
#include <arpa/inet.h>

#include <sys/socket.h>
#include <netinet/in.h>

#include "bsp_tftps.h"

#define BSP_OK		 0
#define BSP_ERROR 	-1

//单包超时时间，单位（秒）
#define TIMEOUT_VAL         1

typedef struct cmdMsg{
	unsigned int head;  //报文头0xFFBBFFBB
	unsigned char cmd;	//命令字
}CMDMSG;

typedef struct Trans_File{
	struct sockaddr_in addr;    //发送目标地址
	char filename[50];         //文件名
}TransFile;

static char pathname[100] = "./";

#define CMD_ID_BOOTREQ	    0
#define CMD_ID_BOOTACK	    1
#define CMD_ID_DATA		    2
#define CMD_ID_ACK		    3

/***********************************************************************
*函数名称：unsigned int calCRC(unsigned char *buf, unsigned int len)
*函数功能：计算32位累加和
*函数参数：  参数名                    描述
*        unsigned char *buf     存放要计算的数据地址
*        unsigned int len        数据长度   
*函数返回：32位累加和
***********************************************************************/
unsigned int calCRC(unsigned char *buf, unsigned int len){
	int i = 0;
	unsigned int crc = 0;
	for(i=0;i<len;i++){
		crc += buf[i];
	}
	return crc;
}
/***********************************************************************
*函数名称：void *transmission_thread(void *arg)
*函数功能：文件传输任务（PPC发送给ARM）
*函数参数：  参数名                                  描述
*        TransFile fileinfo = *(TransFile*)arg;  arg指向保存文件信息的结构地址
*函数返回：0成功  1失败
***********************************************************************/
void *transmission_thread(void *arg)
{
	unsigned int times = 3;      //同一个数据包丢包次数
	unsigned int is_lost = 0;    
	int filefd = 0;
	int sockfd = 0;
	unsigned char sendbuf[1024] = "";
	unsigned char recvbuf[1024] = "";
    char filename[200] = "";
	unsigned int len = 0;
	struct stat st;
	unsigned short sendid = 0;
	fd_set readset;	
		
	TransFile fileinfo = *(TransFile*)arg;
	printf("send file *%s* to %s\r\n", fileinfo.filename, inet_ntoa(fileinfo.addr.sin_addr));
	FD_ZERO(&readset);
	
	sockfd = socket(AF_INET, SOCK_DGRAM,0);	
	if(sockfd<0){
		perror("socket transfile");
		return (void*)BSP_ERROR;
	}
	
	*(unsigned int *)sendbuf = htonl(0xFFBBFFBB);
	sendbuf[4] = CMD_ID_BOOTACK;
	
    sprintf(filename, "%s/%s", pathname, fileinfo.filename);
	filefd = open(filename, O_RDONLY);
	if(filefd < 0){
		perror("open transfile");
		sendbuf[5] = 1; //open file error
		memcpy(sendbuf+6, "open file error", 16);
		sendto(sockfd, sendbuf, 5+16, 0, (struct sockaddr *)&fileinfo.addr, sizeof(struct sockaddr));        
        close(sockfd);
		return (void*)BSP_ERROR;
	}
	fstat(filefd, &st);
	printf("filesize=%d\r\n", st.st_size);
	sendbuf[5] = 0; //open file ok
	*(unsigned int *)(sendbuf+6) = htonl(st.st_size);
	sendto(sockfd, sendbuf, 10, 0, (struct sockaddr *)&fileinfo.addr, sizeof(struct sockaddr));
	
	while(times>0 && st.st_size>0){
		struct sockaddr_in addr = {AF_INET}; 
		unsigned int addrlen = sizeof(addr);
		struct timeval timeout = {1, 0};
		if(!is_lost){ 
        //如果上包数据未丢，则从文件中读取新的一包数据发送，如果上包丢失，则不读新数据，重新发送上包数据
			memset(sendbuf, 0, sizeof(sendbuf));
			len = read(filefd, sendbuf+11, sizeof(sendbuf)-11);
			*(unsigned int *)sendbuf = htonl(0xFFBBFFBB);
			sendbuf[4] = CMD_ID_DATA;
			*(unsigned short *)(sendbuf+5) = htons(sendid);
			*(unsigned int *)(sendbuf+7) = htonl(calCRC(sendbuf+11, len));
		}
        //发送数据
		sendto(sockfd, sendbuf, len+11, 0, (struct sockaddr *)&fileinfo.addr, sizeof(struct sockaddr));

        //等待确认报文
		FD_SET(sockfd, &readset);
		timeout.tv_sec = TIMEOUT_VAL;
		if(select(sockfd+1, &readset, NULL, NULL, &timeout)>0){
			if(FD_ISSET(sockfd, &readset)>0){
                //接收确认报文
				int recvlen = recvfrom(sockfd, recvbuf, sizeof(recvbuf), 0, (struct sockaddr*)&addr, &addrlen); 			
				if(*((unsigned int *)recvbuf)==htonl(0xFFBBFFBB) && recvbuf[4] == CMD_ID_ACK){                    
					unsigned short ackid = *(unsigned short*)(recvbuf+5);
					if(sendid == htons(ackid)){
						sendid++;
						is_lost = 0;
						times = 3;
						st.st_size -= len;
					}
				}
			}
		}else{
            //未收到确认报文
			is_lost = 1;
			printf("lost package...0x%x\r\n", sendid);
			times--;
		}
	}
	close(filefd);
	close(sockfd);
	if(st.st_size>0){
		printf("send file error!\r\n");
        return (void*)BSP_ERROR;
	}else{
		printf("send file successed!\r\n");
        return (void*)BSP_OK;
	}
}

/***********************************************************************
*函数名称：void *server_thread(void *arg)
*函数功能：处理文件请求任务，接收文件下载请求，并创建文件传输任务
*函数参数：无
*函数返回：NULL
***********************************************************************/
void *server_thread(void *arg){
	struct sockaddr_in addr = {AF_INET};
	int addrlen = sizeof(addr);		
	int len = 0;
	unsigned char buf[200] = "";
	CMDMSG *pCmd = (CMDMSG *)buf;
    char filename[200] = "";
	int udp_server_fd = 0;    
    
    //文件请求套接口
    udp_server_fd = socket(AF_INET, SOCK_DGRAM,0);
	if(udp_server_fd<0){
		perror("socket udp");
		return 0;
	}
	
	addr.sin_addr.s_addr = INADDR_ANY;
	addr.sin_port = htons(UDP_PORT_TFTPS);
	if(bind(udp_server_fd, (struct sockaddr*)&addr, sizeof(addr))!=0){
		perror("bind udp_server_fd");
		close(udp_server_fd);
		return 0;
	}
    
    //接收文件下载请求
	while(1){
        TransFile fileinfo;
		memset(buf, 0, sizeof(buf));
		len = recvfrom(udp_server_fd, buf, sizeof(buf), 0, (struct sockaddr *)&addr, &addrlen);
		if(pCmd->head != htonl(0xFFBBFFBB)){
			printf("error head\r\n");
			continue;
		}
		switch(pCmd->cmd){
			case CMD_ID_BOOTREQ:
				memset(&fileinfo, 0, sizeof(fileinfo));
				strcpy(fileinfo.filename, buf+5);
                sprintf(filename, "%s/%s", pathname, fileinfo.filename);
				printf("[%s] request file: *%s*\r\n", inet_ntoa(addr.sin_addr), fileinfo.filename);
				if(access(filename, F_OK)==0){
                    pthread_t transmission_tid;
					fileinfo.addr = addr;
					pthread_create(&transmission_tid, NULL, transmission_thread, (void*)&fileinfo);
					pthread_detach(transmission_tid);
				}else{
					printf("error! *%s* is not exist!\r\n", filename);
					*(unsigned int *)buf = htonl(0xFFBBFFBB);
					buf[4] = CMD_ID_BOOTACK;
					buf[5] = 1;
					memcpy(buf+6, "file not exist", 16);
					sendto(udp_server_fd, buf, 6+strlen(buf+6), 0, (struct sockaddr *)&addr, sizeof(struct sockaddr));
				}
				break;
			default:
				printf("unknow cmd\r\n");
				break;
		}
	}
	return NULL;
}

/***********************************************************************
*函数名称：int init_tftp_server_thread(char *path)
*函数功能：初始化文件下载服务器
*函数参数：  参数名             描述
*           char *path       文件存放路径
*函数返回：无
***********************************************************************/
void init_tftp_server_thread(char *path){
	pthread_t server_tid;
    //
    if( (path!=NULL) && (strlen(path)<(sizeof(pathname)-1))){
        strcpy(pathname, path);
    }    
	pthread_create(&server_tid, NULL, server_thread, NULL);
	pthread_detach(server_tid);	
}
#if 0
int test_main(int argc, char *argv[]){
	init_tftp_server_thread("./");
	printf("WelCome Server...\r\n");
	while(1){
		sleep(1000);
	}
	return 0;
}
#endif
